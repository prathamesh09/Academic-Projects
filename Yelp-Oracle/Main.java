/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package yelp_mongodb;

import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author prath
 */
public class Targetapp extends javax.swing.JFrame {

    /**
     * Creates new form Targetapp
     */
    static List<BasicDBObject> mainCategory = new ArrayList<>();
    static List<String> attributes = new ArrayList<>();
    static DBCollection business;
    static MongoClient mongoClient;
    static List<String> AttributeList = new ArrayList<>();
    public static List<String> businessList = new ArrayList<>();
    static JPanel panel1;
    userInputJFrame frame;
    String category="",attribute="";
    JScrollPane jsp2;
    float latitude=0,longitude=0;
    int distance,goAhead=0;
    public Targetapp() {
        
              
        initComponents();
        frame = new userInputJFrame();
        panel1 = new JPanel(); 
        panel1.setLayout(new GridLayout(375,500));
        jsp2 =new JScrollPane(panel1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        choice1.addItem("");
        choice1.addItem("-112,33");
        choice1.addItem("-89,43");
        choice1.addItem("-114,35");
        choice1.addItem("-80,43");
        choice1.addItem("-3,55");
        
        choice2.addItem("");
        choice2.addItem("5 miles");
        choice2.addItem("10 miles");
        choice2.addItem("20 miles");
        choice2.addItem("30 miles");
        choice2.addItem("40 miles");
        choice2.addItem("50 miles");
        
        choice3.addItem("");
        choice3.addItem("All");
        choice3.addItem("Any");
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jCheckBox27 = new javax.swing.JCheckBox();
        jCheckBox28 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        choice1 = new java.awt.Choice();
        choice2 = new java.awt.Choice();
        choice3 = new java.awt.Choice();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("Active Life");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox2.setText("Arts & Entertainment");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jCheckBox3.setText("Automotive");
        jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox3ItemStateChanged(evt);
            }
        });

        jCheckBox4.setText("Car Rental");
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox4ItemStateChanged(evt);
            }
        });

        jCheckBox5.setText("Cafes");
        jCheckBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox5ItemStateChanged(evt);
            }
        });

        jCheckBox6.setText("Beauty & Spas");
        jCheckBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox6ItemStateChanged(evt);
            }
        });

        jCheckBox7.setText("Convenience Stores");
        jCheckBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox7ItemStateChanged(evt);
            }
        });

        jCheckBox8.setText("Dentists");
        jCheckBox8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox8ItemStateChanged(evt);
            }
        });

        jCheckBox9.setText("Doctors");
        jCheckBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox9ItemStateChanged(evt);
            }
        });

        jCheckBox10.setText("Drugstores");
        jCheckBox10.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox10ItemStateChanged(evt);
            }
        });

        jCheckBox11.setText("Department Stores");
        jCheckBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox11ItemStateChanged(evt);
            }
        });

        jCheckBox12.setText("Education");
        jCheckBox12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox12ItemStateChanged(evt);
            }
        });

        jCheckBox13.setText("Event Planning & Services");
        jCheckBox13.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox13ItemStateChanged(evt);
            }
        });

        jCheckBox14.setText("Flowers & Gifts");
        jCheckBox14.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox14ItemStateChanged(evt);
            }
        });

        jCheckBox15.setText("Food");
        jCheckBox15.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox15ItemStateChanged(evt);
            }
        });

        jCheckBox16.setText("Health & Medical");
        jCheckBox16.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox16ItemStateChanged(evt);
            }
        });

        jCheckBox17.setText("Home Services");
        jCheckBox17.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox17ItemStateChanged(evt);
            }
        });

        jCheckBox18.setText("Home & Garden");
        jCheckBox18.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox18ItemStateChanged(evt);
            }
        });

        jCheckBox19.setText("Hospitals");
        jCheckBox19.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox19ItemStateChanged(evt);
            }
        });

        jCheckBox20.setText("Hotels & Travel");
        jCheckBox20.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox20ItemStateChanged(evt);
            }
        });

        jCheckBox21.setText("Hardware Stores");
        jCheckBox21.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox21ItemStateChanged(evt);
            }
        });

        jCheckBox22.setText("Grocery");
        jCheckBox22.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox22ItemStateChanged(evt);
            }
        });

        jCheckBox23.setText("Medical Centers");
        jCheckBox23.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox23ItemStateChanged(evt);
            }
        });

        jCheckBox24.setText("Nurseries & Gardening");
        jCheckBox24.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox24ItemStateChanged(evt);
            }
        });

        jCheckBox25.setText("Nightlife");
        jCheckBox25.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox25ItemStateChanged(evt);
            }
        });

        jCheckBox26.setText("Restaurants");
        jCheckBox26.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox26ItemStateChanged(evt);
            }
        });

        jCheckBox27.setText("Shopping");
        jCheckBox27.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox27ItemStateChanged(evt);
            }
        });

        jCheckBox28.setText("Transportation");
        jCheckBox28.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox28ItemStateChanged(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Business", "City", "State", "Stars"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search");

        jButton3.setText("Close");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });
        choice1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                choice1InputMethodTextChanged(evt);
            }
        });

        choice2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice2ItemStateChanged(evt);
            }
        });

        choice3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice3ItemStateChanged(evt);
            }
        });

        label1.setText("Point Of Interest");

        label2.setText("Proximity");

        label3.setText("Search For");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox28)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15)
                    .addComponent(jCheckBox16)
                    .addComponent(jCheckBox17)
                    .addComponent(jCheckBox18)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20)
                    .addComponent(jCheckBox21)
                    .addComponent(jCheckBox22)
                    .addComponent(jCheckBox23)
                    .addComponent(jCheckBox24)
                    .addComponent(jCheckBox25)
                    .addComponent(jCheckBox26)
                    .addComponent(jCheckBox27)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox1))
                        .addGap(175, 175, 175)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(jButton2)
                        .addGap(113, 113, 113)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 190, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jCheckBox1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(jButton2)
                                .addComponent(jButton3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox4)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox8)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox16)
                        .addGap(21, 21, 21)
                        .addComponent(jCheckBox17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox27))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox28)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
          rtvAttr(evt);
    }                                           

    private void jCheckBox26ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox15ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
          rtvAttr(evt);
    }                                            

    private void jCheckBox19ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
           rtvAttr(evt);
    }                                            

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox5ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox6ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox7ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox8ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox9ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                           

    private void jCheckBox10ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox11ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox12ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox13ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox14ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox16ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox17ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox18ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox20ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox21ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
      rtvAttr(evt);
    }                                            

    private void jCheckBox22ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox23ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox24ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox25ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void jCheckBox27ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
       rtvAttr(evt);
    }                                            

    private void jCheckBox28ItemStateChanged(java.awt.event.ItemEvent evt) {                                             
        // TODO add your handling code here:
        rtvAttr(evt);
    }                                            

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {                                         
        // TODO add your handling code here:
        String location = evt.getItem().toString();
        if(location.length()>0){
            String loc[]=location.split(",");
            longitude = Float.parseFloat(loc[0]);
            latitude = Float.parseFloat(loc[1]);
            System.out.println("Location:"+longitude+","+latitude);
            goAhead++;
        } 
    }                                        

    private void choice2ItemStateChanged(java.awt.event.ItemEvent evt) {                                         
        // TODO add your handling code here:
        String near = evt.getItem().toString();
        if(near.length()>0){
            String loc[]=near.split(" ");
            distance = Integer.parseInt(loc[0]);
            System.out.println("Distance:"+distance);
            goAhead++;
        } 
    }                                        

    private void choice3ItemStateChanged(java.awt.event.ItemEvent evt) {                                         
        // TODO add your handling code here:
        String attributeVal = evt.getItem().toString();
        if(attributeVal.length()>0){
            attribute = attributeVal;
            System.out.println("Mode:"+attribute);
            goAhead++;
        } 
    }                                        

    private void rtvAttr(java.awt.event.ItemEvent evt){
          if(evt.getStateChange()==ItemEvent.SELECTED){
                   category = evt.getItem().toString();
                   category = category.substring(category.indexOf("text=")+5,category.length() - 1);
                   addCategory(category);
                   attributes.clear();
                   if(attribute.equals("Any")){
                        rtvAnyAttribute();
                        displayAttributes();
                   } else if(attribute.equals("All")){
                       rtvAttributes();
                       displayAttributes();
                   } else
                       JOptionPane.showMessageDialog (null,"Selection of attribute selection mode is compulsory", "Error", JOptionPane.ERROR_MESSAGE);
                   
            }
            if(evt.getStateChange()==ItemEvent.DESELECTED){
                  category = evt.getItem().toString();
                  category = category.substring(category.indexOf("text=")+5,category.length() - 1);
                  removeCategory(category);
                  attributes.clear();
                  if(mainCategory.size()>0){
                  if(attribute.equals("Any")){
                        rtvAnyAttribute();
                        displayAttributes();
                   } else if(attribute.equals("All")){
                       rtvAttributes();
                       displayAttributes();
                   } else
                       JOptionPane.showMessageDialog (null,"Selection of attribute selection mode is compulsory", "Error", JOptionPane.ERROR_MESSAGE);
                  }
            }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
                       try{
                    if(longitude!=0 && latitude!=0 && distance!=0 && !attribute.equals("")){
                        goAhead = 0;
                        
                    mongoClient = new MongoClient();//"localhost",27017);
                    DB db = mongoClient.getDB("yelp");
            
//            boolean auth = db.authenticate("admin", "password".toCharArray());
                BasicDBObject select = new BasicDBObject();
                select.put("_id",0);
                select.put("business_id", 1);
                select.put("address",1);
                select.put("city",1);
                select.put("name",1);
                select.put("state",1);
                select.put("stars",1);
                select.put("latitude", 1);
                select.put("longitude", 1); 
                select.put("attributes", 1);
                business = db.getCollection("business");
                DBCursor locCursor = business.find(new BasicDBObject(), select);
                double minDist = 10000;
                int row = locCursor.count();
                
                longitude = longitude - 0.33f;
                latitude = latitude + 0.23f;
                
                String[] columnNames = {"Business Name", "City", "State", "Stars"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                while(locCursor.hasNext()){
                    DBObject dbo = locCursor.next();
                    String bid = dbo.get("business_id").toString();
                    String city = dbo.get("city").toString();
                    String state = dbo.get("state").toString();
                    String name = dbo.get("name").toString();
                    String stars = dbo.get("stars").toString();
                    String attr = dbo.get("attributes").toString();
                        
                    float lat = Float.parseFloat(dbo.get("latitude").toString());
                    float lon = Float.parseFloat(dbo.get("longitude").toString());
                    
                    
                    float diffLat=0,diffLon=0;// = Math.abs(latitude) - Math.abs(lat);  = Math.abs(longitude) - Math.abs(lon);
                    
                    if(lat > latitude)
                         diffLat = lat - latitude;
                    else if(latitude > lat)
                         diffLat = latitude - lat;
                    else 
                        diffLat = 0;
                    
                    if(lon > longitude)    
                        diffLon = lon - longitude;
                    else if(longitude > lon)
                        diffLon = longitude - lon;
                    else
                        diffLon = 0;
                    
                    float latSide = diffLat * 55;
                    float lonSide = diffLon * 55;
                    
                    float sideSquare1 = latSide * latSide;
                    float sideSquare2 = lonSide * lonSide;
                    Boolean card=false,parcel=false,kids=false,dogs=false;
                    double distance1 = Math.sqrt((sideSquare1 + sideSquare2));
                    
                    if(distance1 <= distance){
                        JSONObject jo = (JSONObject) new JSONParser().parse(attr);
                        try{
                        if(jo.containsKey("Accepts Credit Cards")) 
                            card = (Boolean) jo.get("Accepts Credit Cards");
                        if(jo.containsKey("Take-out"))
                             parcel = (Boolean) jo.get("Take-out");
                        if(jo.containsKey("Good for Kids"))
                            kids = (Boolean) jo.get("Good for Kids");
                        if(jo.containsKey("Dogs Allowed"))
                            dogs = (Boolean) jo.get("Dogs Allowed");
                        }catch(Exception boolEx){}
                        if(AttributeList.contains("Accepts Credit Cards") && AttributeList.contains("Take-out") && AttributeList.contains("Good for Kids") && AttributeList.contains("Dogs Allowed")){
                            if(attributes.equals("All")){
                                if(card && parcel && kids && dogs) {
                                    businessList.add(bid);
                                    model.addRow(new Object[]{name, city, state, stars});
                                }
                            } else if(attributes.equals("Any")){
                                if(card || parcel || kids || dogs) {
                                    businessList.add(bid);
                                    model.addRow(new Object[]{name, city, state, stars});
                                }
                            }
                        } else if(AttributeList.contains("Accepts Credit Cards") && AttributeList.contains("Take-out") && AttributeList.contains("Good for Kids")){
                            if(attributes.equals("All")){
                                if(card && parcel && kids) {
                                    businessList.add(bid);
                                    model.addRow(new Object[]{name, city, state, stars});
                                }
                            } else if(attributes.equals("Any")){
                                if(card || parcel || kids) {
                                    businessList.add(bid);
                                    model.addRow(new Object[]{name, city, state, stars});
                                }
                            }
                        } else {
                                businessList.add(bid);
                                model.addRow(new Object[]{name, city, state, stars});
                        }
                    }
                }
                System.out.println("Business:"+businessList.toString());
                mongoClient.close();
                jTable1.setModel(model);
                jTable1.repaint();
                AttributeList.clear();
                refreshComponents();
                    } else
                        JOptionPane.showMessageDialog (null,"Selection of proximity,location and attribute selection mode is compulsory", "Error", JOptionPane.ERROR_MESSAGE);
                }catch(Exception e){e.printStackTrace();}
                
                
            //}
        //}
    }                                        

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        try{
        int row = jTable1.rowAtPoint(evt.getPoint());
        System.out.println("Row number:"+row);
        String currentBID = businessList.get(row);
        if(currentBID != null)
            if(currentBID.length()>0){
                System.out.println("BID:"+currentBID);
                new Reviews(currentBID).setVisible(true);
            }
        }catch(Exception e){e.printStackTrace();}
    }                                    

    private void choice1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {                                               
        
    }                                              

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Targetapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Targetapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Targetapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Targetapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Targetapp().setVisible(true);
            }
        });
        try{
            
            
            mongoClient = new MongoClient();//"localhost",27017);
                    DB db = mongoClient.getDB("yelp");
            if(!db.collectionExists("business_location")){
                db.createCollection("business_location", new BasicDBObject());
                System.out.println("Collection creation");
                
                DBCollection business_location = db.getCollection("business_location");
                DBCollection business = db.getCollection("business");
            
                BasicDBObject select = new BasicDBObject();
                select.put("_id",0);
                select.put("business_id", 1);
                select.put("latitude", 1);
                select.put("longitude", 1);
                DBCursor locCursor = business.find(new BasicDBObject(), select);
                int row = locCursor.count();
                System.out.println("Rows:"+row);
                while(locCursor.hasNext()){
                    DBObject dbo = locCursor.next();
                    String bid = dbo.get("business_id").toString();
                    float lat = Float.parseFloat(dbo.get("latitude").toString());
                    float lon = Float.parseFloat(dbo.get("longitude").toString());
                    String location = lon+","+lat;
                    business_location.save(new BasicDBObject(bid,new BasicDBObject("loc",location)));
                }
            }
            
            
        //} catch(UnknownHostException ex) { ex.printStackTrace();
        } catch(NullPointerException npe){ npe.printStackTrace();
        } catch(Exception e){e.printStackTrace();}
    }
    
    private void addCategory(String main){
        mainCategory.add(new BasicDBObject("categories",main));
        category="";
    }
    
    private void removeCategory(String main){
        mainCategory.remove(new BasicDBObject("categories",main));
        category="";
    }
     
    
    private void rtvAttributes(){
        try{
            
            
            mongoClient = new MongoClient();//"localhost",27017);
            DB db = mongoClient.getDB("yelp");
            DBObject multiCategory = new BasicDBObject("$and",mainCategory);
            DBObject matchMainCategory = new BasicDBObject("$match", multiCategory);
            DBObject groupBy = new BasicDBObject("$group",new BasicDBObject("_id",new BasicDBObject("attributes","$attributes")));
            
            business = db.getCollection("business");
            AggregationOutput output = business.aggregate(matchMainCategory,groupBy);         
            mongoClient.close();
            for (DBObject result : output.results()) {
                   JSONObject obj= (JSONObject) new JSONParser().parse(result.toString());
                   JSONObject id = (JSONObject) obj.get("_id");
                   JSONObject keyValAttr = (JSONObject) id.get("attributes");
                   Set<String> keys = keyValAttr.keySet();
                    Iterator<String> itrKeys = keys.iterator();
                    while(itrKeys.hasNext()){
                        String key = itrKeys.next();
                        if(!attributes.contains(key)){
                            attributes.add(key);
                        }
                    }
            }     
            
        }catch(Exception e){e.printStackTrace();}
    }
    
    private void rtvAnyAttribute(){
        try{
            System.out.println("inside rtv any attr");
            
            
            
            mongoClient = new MongoClient();//"localhost",27017);
            DB db = mongoClient.getDB("yelp");
//            boolean auth = db.authenticate("admin", "password".toCharArray());
  //          System.out.println("\t+auth:" +auth);
            DBObject multiCategory = new BasicDBObject("$or",mainCategory);
            DBObject matchMainCategory = new BasicDBObject("$match", multiCategory);
            DBObject groupBy = new BasicDBObject("$group",new BasicDBObject("_id",new BasicDBObject("attributes","$attributes")));
            
            business = db.getCollection("business");
            AggregationOutput output = business.aggregate(matchMainCategory,groupBy);
            
            mongoClient.close();
            
            for (DBObject result : output.results()) {
                   JSONObject obj= (JSONObject) new JSONParser().parse(result.toString());
                   JSONObject id = (JSONObject) obj.get("_id");
                   JSONObject keyValAttr = (JSONObject) id.get("attributes");
                   Set<String> keys = keyValAttr.keySet();
                    Iterator<String> itrKeys = keys.iterator();
                    while(itrKeys.hasNext()){
                        String key = itrKeys.next();
                        if(!attributes.contains(key)){
                            attributes.add(key);
                        }
                    }
            }     
            //System.out.println("Attributes:"+attributes.size());
        }catch(Exception e){e.printStackTrace();}
    }

       private void refreshComponents(){
            panel1.removeAll();
            panel1.revalidate();
            panel1.repaint();
            frame.dispose();
            
            frame = new userInputJFrame();
        panel1 = new JPanel(); 
        panel1.setLayout(new GridLayout(375,500));
        jsp2 =new JScrollPane(panel1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    }
       
    private void displayAttributes(){
        refreshComponents();
         Iterator itrAttr = attributes.iterator();
         while(itrAttr.hasNext()){
                                            String Attribute = (String) itrAttr.next();
            
                                            JCheckBox jcb = new JCheckBox(Attribute);
                                            jcb.addItemListener(new ItemListener(){
                                            @Override
                                            public void itemStateChanged(ItemEvent e) {
                                                        String currAttribute = e.toString().substring(e.toString().indexOf("text=")+5,e.toString().indexOf("stateChange")-2);
                                                        if(e.getStateChange() == ItemEvent.SELECTED){
                                                            if(!AttributeList.contains(currAttribute))
                                                                      AttributeList.add(currAttribute);
                                                        } else if(e.getStateChange() == ItemEvent.DESELECTED){
                                                                if(AttributeList.contains(currAttribute))
                                                                    AttributeList.remove(currAttribute);
                                                        }
                                                        String Attr="",AllAttr="<html>Attributes:" ;
                                                        Iterator itrAttr = AttributeList.iterator();
                                                        while(itrAttr.hasNext()){
                                                            Attr = (String) itrAttr.next();
                                                            AllAttr += "<br>" + Attr;
                                                        }
                                                        AllAttr = AllAttr + "</html>";
                                            
                                                }
                                            });
                                            panel1.add(jcb);
                                            panel1.revalidate();
                                            panel1.repaint();
            }
            frame.add(jsp2);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(300, 200);
            frame.setLocation(getContentPane().getX() + 600, getContentPane().getY() + 275); 
            frame.setVisible(true); 
                                
    }
    // Variables declaration - do not modify                     
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private java.awt.Choice choice3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    // End of variables declaration                   
}
